{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { stat } from 'fs-extra';\nimport posts from './fakeApiData';\nconst initialState = {\n  loading: false,\n  hasErrors: false,\n  posts: []\n};\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    getPosts: state => {\n      state.loading = true;\n    },\n    getPostsSuccess: (state, {\n      payload\n    }) => {\n      state.posts = payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getPostsFailure: state => {\n      state.loading = false;\n      state.hasErrors = true;\n    }\n  }\n}); // Asynchronous thunk function\n\nexport function fetchPosts() {\n  return async dispatch => {\n    dispatch(getPosts());\n\n    try {\n      const postsData = posts;\n      dispatch(getPostsSuccess(postsData));\n    } catch (error) {\n      dispatch(getPostsFailure());\n    }\n  };\n} // three action generated from this slice\n\nexport const {\n  getPosts,\n  getPostsSuccess,\n  getPostsFailure\n} = postsSlice.actions; // a selector\n\nexport const postsSelector = state => state.posts; // the reducer\n\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/home/sdlive/React Apps/React-Tailwindcss/react-tailwindcss/src/slices/postsSlice.js"],"names":["createSlice","stat","posts","initialState","loading","hasErrors","postsSlice","name","reducers","getPosts","state","getPostsSuccess","payload","getPostsFailure","fetchPosts","dispatch","postsData","error","actions","postsSelector","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,OAAO,EAAE,KADW;AAEpBC,EAAAA,SAAS,EAAE,KAFS;AAGpBH,EAAAA,KAAK,EAAE;AAHa,CAArB;AAMA,MAAMI,UAAU,GAAGN,WAAW,CAAC;AAC9BO,EAAAA,IAAI,EAAE,OADwB;AAE9BJ,EAAAA,YAF8B;AAG9BK,EAAAA,QAAQ,EAAE;AACTC,IAAAA,QAAQ,EAAEC,KAAK,IAAI;AAClBA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACA,KAHQ;AAITO,IAAAA,eAAe,EAAE,CAACD,KAAD,EAAQ;AAACE,MAAAA;AAAD,KAAR,KAAsB;AACtCF,MAAAA,KAAK,CAACR,KAAN,GAAcU,OAAd;AACAF,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,SAAN,GAAkB,KAAlB;AACA,KARQ;AASTQ,IAAAA,eAAe,EAAEH,KAAK,IAAI;AACzBA,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,SAAN,GAAkB,IAAlB;AACA;AAZQ;AAHoB,CAAD,CAA9B,C,CAmBA;;AACA,OAAO,SAASS,UAAT,GAAsB;AAC5B,SAAO,MAAMC,QAAN,IAAkB;AACxBA,IAAAA,QAAQ,CAACN,QAAQ,EAAT,CAAR;;AAEA,QAAI;AAEH,YAAMO,SAAS,GAAGd,KAAlB;AACAa,MAAAA,QAAQ,CAACJ,eAAe,CAACK,SAAD,CAAhB,CAAR;AAEA,KALD,CAKE,OAAMC,KAAN,EAAa;AACdF,MAAAA,QAAQ,CAACF,eAAe,EAAhB,CAAR;AACA;AACD,GAXD;AAYA,C,CAED;;AACA,OAAO,MAAM;AAAEJ,EAAAA,QAAF;AAAYE,EAAAA,eAAZ;AAA6BE,EAAAA;AAA7B,IAAiDP,UAAU,CAACY,OAAlE,C,CAEP;;AACA,OAAO,MAAMC,aAAa,GAAGT,KAAK,IAAIA,KAAK,CAACR,KAArC,C,CAEP;;AACA,eAAeI,UAAU,CAACc,OAA1B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { stat } from 'fs-extra';\nimport posts from './fakeApiData';\n\nconst initialState = {\n\tloading: false,\n\thasErrors: false,\n\tposts: [],\n}\n\nconst postsSlice = createSlice({\n\tname: 'posts',\n\tinitialState,\n\treducers: {\n\t\tgetPosts: state => {\n\t\t\tstate.loading = true;\n\t\t},\n\t\tgetPostsSuccess: (state, {payload}) => {\n\t\t\tstate.posts = payload\n\t\t\tstate.loading = false\n\t\t\tstate.hasErrors = false\n\t\t},\n\t\tgetPostsFailure: state => {\n\t\t\tstate.loading = false\n\t\t\tstate.hasErrors = true\n\t\t}\n\t}\n});\n\n// Asynchronous thunk function\nexport function fetchPosts() {\n\treturn async dispatch => {\n\t\tdispatch(getPosts());\n\n\t\ttry {\n\n\t\t\tconst postsData = posts;\n\t\t\tdispatch(getPostsSuccess(postsData));\n\n\t\t} catch(error) {\n\t\t\tdispatch(getPostsFailure());\n\t\t}\n\t}\n}\n\n// three action generated from this slice\nexport const { getPosts, getPostsSuccess, getPostsFailure } = postsSlice.actions;\n\n// a selector\nexport const postsSelector = state => state.posts;\n\n// the reducer\nexport default postsSlice.reducer;"]},"metadata":{},"sourceType":"module"}