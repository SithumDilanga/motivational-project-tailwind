{"ast":null,"code":"import { createSlice, create } from '@reduxjs/toolkit';\nimport postData from '../fakeApiData';\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  posts: []\n}; // A slice for recipes with our three reducers\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    getPosts: state => {\n      state.loading = true;\n    },\n    getPostsSuccess: (state, {\n      payload\n    }) => {\n      state.posts = payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getPostsFailure: state => {\n      state.loading = false;\n      state.hasErrors = true;\n    }\n  }\n}); // Asynchronous thunk action\n\nexport function fetchPosts() {\n  return async dispatch => {\n    dispatch(getPosts()); //   try {\n    //     const response = await fetch('https://www.themealdb.com/api/json/v1/1/search.php?s=')\n    //     const data = await response.json()\n    //     dispatch(getRecipesSuccess(data.meals))\n    //   } catch (error) {\n    //     dispatch(getRecipesFailure())\n    //   }\n\n    try {\n      const postsData = postData;\n      dispatch(getPostsSuccess(postsData));\n      console.log(postData);\n    } catch (error) {\n      dispatch(getPostsFailure());\n    }\n  };\n} // Three actions generated from the slice\n\nexport const {\n  getPosts,\n  getPostsSuccess,\n  getPostsFailure\n} = postsSlice.actions; // A selector\n\nexport const postsSelector = state => state.posts; // The reducer\n\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/home/sdlive/React Apps/React-Tailwindcss/react-tailwindcss/src/slices/postsSlice.js"],"names":["createSlice","create","postData","initialState","loading","hasErrors","posts","postsSlice","name","reducers","getPosts","state","getPostsSuccess","payload","getPostsFailure","fetchPosts","dispatch","postsData","console","log","error","actions","postsSelector","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;AAEA,OAAOC,QAAP,MAAqB,gBAArB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,KADiB;AAE1BC,EAAAA,SAAS,EAAE,KAFe;AAG1BC,EAAAA,KAAK,EAAE;AAHmB,CAArB,C,CAMP;;AACA,MAAMC,UAAU,GAAGP,WAAW,CAAC;AAC7BQ,EAAAA,IAAI,EAAE,OADuB;AAE7BL,EAAAA,YAF6B;AAG7BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAEC,KAAK,IAAI;AACjBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,KAHO;AAIRQ,IAAAA,eAAe,EAAE,CAACD,KAAD,EAAQ;AAAEE,MAAAA;AAAF,KAAR,KAAwB;AACvCF,MAAAA,KAAK,CAACL,KAAN,GAAcO,OAAd;AACAF,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACD,KARO;AASRS,IAAAA,eAAe,EAAEH,KAAK,IAAI;AACxBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD;AAZO;AAHmB,CAAD,CAA9B,C,CAmBA;;AACA,OAAO,SAASU,UAAT,GAAsB;AACzB,SAAO,MAAMC,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACN,QAAQ,EAAT,CAAR,CADuB,CAGzB;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEF,QAAI;AAEH,YAAMO,SAAS,GAAGf,QAAlB;AACAc,MAAAA,QAAQ,CAACJ,eAAe,CAACK,SAAD,CAAhB,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ;AAEA,KAND,CAME,OAAMkB,KAAN,EAAa;AACdJ,MAAAA,QAAQ,CAACF,eAAe,EAAhB,CAAR;AACA;AACE,GArBD;AAsBD,C,CAEH;;AACA,OAAO,MAAM;AAAEJ,EAAAA,QAAF;AAAYE,EAAAA,eAAZ;AAA6BE,EAAAA;AAA7B,IAAiDP,UAAU,CAACc,OAAlE,C,CAEP;;AACA,OAAO,MAAMC,aAAa,GAAGX,KAAK,IAAIA,KAAK,CAACL,KAArC,C,CAEP;;AACA,eAAeC,UAAU,CAACgB,OAA1B","sourcesContent":["import { createSlice, create } from '@reduxjs/toolkit'\n\nimport postData from '../fakeApiData';\n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  posts: [],\n}\n\n// A slice for recipes with our three reducers\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    getPosts: state => {\n      state.loading = true\n    },\n    getPostsSuccess: (state, { payload }) => {\n      state.posts = payload\n      state.loading = false\n      state.hasErrors = false\n    },\n    getPostsFailure: state => {\n      state.loading = false\n      state.hasErrors = true\n    },\n  },\n})\n\n// Asynchronous thunk action\nexport function fetchPosts() {\n    return async dispatch => {\n      dispatch(getPosts())\n  \n    //   try {\n    //     const response = await fetch('https://www.themealdb.com/api/json/v1/1/search.php?s=')\n    //     const data = await response.json()\n  \n    //     dispatch(getRecipesSuccess(data.meals))\n    //   } catch (error) {\n    //     dispatch(getRecipesFailure())\n    //   }\n\n\t\ttry {\n\n\t\t\tconst postsData = postData;\n\t\t\tdispatch(getPostsSuccess(postsData));\n\t\t\tconsole.log(postData);\n\n\t\t} catch(error) {\n\t\t\tdispatch(getPostsFailure());\n\t\t}\n    }\n  }\n\n// Three actions generated from the slice\nexport const { getPosts, getPostsSuccess, getPostsFailure } = postsSlice.actions\n\n// A selector\nexport const postsSelector = state => state.posts\n\n// The reducer\nexport default postsSlice.reducer"]},"metadata":{},"sourceType":"module"}