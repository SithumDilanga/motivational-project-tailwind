{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { stat } from 'fs-extra'; // import postData from './fakeApiData';\n\nimport img1 from '../assets/img1.jpg';\nimport img2 from '../assets/img2.png';\nconst postData = [{\n  username: 'Steve Hawl',\n  date: '28 jun 2020',\n  userProfilePic: {\n    img1\n  },\n  postDesc: 'This is post description',\n  postImages: ['https://live.staticflickr.com/65535/51289414298_52b007f540_h.jpg', 'https://live.staticflickr.com/65535/51294202574_2bfe8c0cdb_h.jpg'],\n  postReactions: {\n    good: '15',\n    awesome: '7',\n    excellent: '5',\n    bad: '1'\n  }\n}, {\n  username: 'Jack Mori',\n  date: '25 jun 2020',\n  userProfilePic: {\n    img2\n  },\n  postDesc: 'This is post description of Jack',\n  postImages: ['https://live.staticflickr.com/65535/51294202574_2bfe8c0cdb_h.jpg'],\n  postReactions: {\n    good: '15',\n    awesome: '7',\n    excellent: '5',\n    bad: '1'\n  }\n}, {\n  username: 'Jane Oni',\n  date: '24 jun 2020',\n  userProfilePic: {\n    img2\n  },\n  postDesc: 'This is post description of Jane',\n  postImages: [\"https://live.staticflickr.com/65535/51304260849_d30f211689_h.jpg\", \"https://live.staticflickr.com/65535/51295760866_c10e777459_h.jpg\"],\n  postReactions: {\n    good: '25',\n    awesome: '15',\n    excellent: '9',\n    bad: '5'\n  }\n}, {\n  username: 'Niko Belic',\n  date: '20 jun 2020',\n  userProfilePic: {\n    img2\n  },\n  postDesc: 'This is post description of Niko Belic',\n  postImages: [\"https://live.staticflickr.com/65535/51300730820_9c3eb95cac_k.jpg\"],\n  postReactions: {\n    good: '35',\n    awesome: '15',\n    excellent: '14',\n    bad: '1'\n  }\n}];\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  posts: []\n};\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    getPosts: state => {\n      state.loading = true;\n    },\n    getPostsSuccess: (state, {\n      payload\n    }) => {\n      state.posts = payload;\n      state.loading = false;\n      state.hasErrors = false;\n    },\n    getPostsFailure: state => {\n      state.loading = false;\n      state.hasErrors = true;\n    }\n  }\n}); // Asynchronous thunk function\n\nexport function fetchPosts() {\n  return async dispatch => {\n    dispatch(getPosts()); // try {\n    // \tconst response = await fetch('https://www.themealdb.com/api/json/v1/1/search.php?s=')\n    // \tconst data = await response.json()\n    // \tdispatch(getPostsSuccess(data.meals))\n    //   } catch (error) {\n    // \tdispatch(getPostsFailure())\n    //   }\n    // try {\n    // \tconst postsData = postData;\n    // \tdispatch(getPostsSuccess(postsData));\n    // } catch(error) {\n    // \tdispatch(getPostsFailure());\n    // }\n  };\n} // three action generated from this slice\n\nexport const {\n  getPosts,\n  getPostsSuccess,\n  getPostsFailure\n} = postsSlice.actions; // a selector\n\nexport const postsSelector = state => state.posts; // the reducer\n\nexport default postsSlice.reducer;","map":{"version":3,"sources":["/home/sdlive/React Apps/React-Tailwindcss/react-tailwindcss/src/slices/postsSlice.js"],"names":["createSlice","stat","img1","img2","postData","username","date","userProfilePic","postDesc","postImages","postReactions","good","awesome","excellent","bad","initialState","loading","hasErrors","posts","postsSlice","name","reducers","getPosts","state","getPostsSuccess","payload","getPostsFailure","fetchPosts","dispatch","actions","postsSelector","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { stat } from 'fs-extra';\n// import postData from './fakeApiData';\nimport img1 from '../assets/img1.jpg';\nimport img2 from '../assets/img2.png';\n\nconst postData = [\n    {\n      username: 'Steve Hawl',\n      date: '28 jun 2020',\n      userProfilePic: {img1},\n      postDesc: 'This is post description',\n      postImages: [\n        'https://live.staticflickr.com/65535/51289414298_52b007f540_h.jpg', \n        'https://live.staticflickr.com/65535/51294202574_2bfe8c0cdb_h.jpg'\n      ],\n      postReactions: {\n          good: '15',\n          awesome: '7',\n          excellent: '5',\n          bad: '1'\n        }\n      ,\n    },\n    {\n      username: 'Jack Mori',\n      date: '25 jun 2020',\n      userProfilePic: {img2},\n      postDesc: 'This is post description of Jack',\n      postImages: [\n        'https://live.staticflickr.com/65535/51294202574_2bfe8c0cdb_h.jpg', \n      ],\n      postReactions: {\n          good: '15',\n          awesome: '7',\n          excellent: '5',\n          bad: '1'\n        }\n      ,\n    },\n    {\n      username: 'Jane Oni',\n      date: '24 jun 2020',\n      userProfilePic: {img2},\n      postDesc: 'This is post description of Jane',\n      postImages: [\n        \"https://live.staticflickr.com/65535/51304260849_d30f211689_h.jpg\",\n        \"https://live.staticflickr.com/65535/51295760866_c10e777459_h.jpg\", \n      ],\n      postReactions: {\n          good: '25',\n          awesome: '15',\n          excellent: '9',\n          bad: '5'\n        }\n      ,\n    },\n    {\n      username: 'Niko Belic',\n      date: '20 jun 2020',\n      userProfilePic: {img2},\n      postDesc: 'This is post description of Niko Belic',\n      postImages: [\n        \"https://live.staticflickr.com/65535/51300730820_9c3eb95cac_k.jpg\", \n      ],\n      postReactions: {\n          good: '35',\n          awesome: '15',\n          excellent: '14',\n          bad: '1'\n        },\n    },\n  ];\n\n\nexport const initialState = {\n\tloading: false,\n\thasErrors: false,\n\tposts: [],\n}\n\nconst postsSlice = createSlice({\n\tname: 'posts',\n\tinitialState,\n\treducers: {\n\t\tgetPosts: state => {\n\t\t\tstate.loading = true;\n\t\t},\n\t\tgetPostsSuccess: (state, {payload}) => {\n\t\t\tstate.posts = payload\n\t\t\tstate.loading = false\n\t\t\tstate.hasErrors = false\n\t\t},\n\t\tgetPostsFailure: state => {\n\t\t\tstate.loading = false\n\t\t\tstate.hasErrors = true\n\t\t}\n\t}\n});\n\n// Asynchronous thunk function\nexport function fetchPosts() {\n\treturn async dispatch => {\n\t\tdispatch(getPosts());\n\n\t\t// try {\n\t\t// \tconst response = await fetch('https://www.themealdb.com/api/json/v1/1/search.php?s=')\n\t\t// \tconst data = await response.json()\n\t  \n\t\t// \tdispatch(getPostsSuccess(data.meals))\n\t\t//   } catch (error) {\n\t\t// \tdispatch(getPostsFailure())\n\t\t//   }\n\n\t\t// try {\n\n\t\t// \tconst postsData = postData;\n\t\t// \tdispatch(getPostsSuccess(postsData));\n\n\t\t// } catch(error) {\n\t\t// \tdispatch(getPostsFailure());\n\t\t// }\n\t}\n}\n\n// three action generated from this slice\nexport const { getPosts, getPostsSuccess, getPostsFailure } = postsSlice.actions;\n\n// a selector\nexport const postsSelector = state => state.posts;\n\n// the reducer\nexport default postsSlice.reducer;"]},"metadata":{},"sourceType":"module"}